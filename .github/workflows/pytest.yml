name: Python package

on:
  push:
  pull_request:
    branches:
      - main
      - dev

# Cancel if a newer run is started
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        test-file:
          - tests/test_bcr_embeddings.py
          - tests/test_tcr_embeddings.py
          - tests/test_protein_embeddings.py
          - tests/test_utils.py

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Setup conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniconda-version: "latest"
          activate-environment: foo
      # Install pip and pytest
      - name: Install dependencies
        shell: bash -el {0}
        run: |
          python -m pip install --upgrade pip
          python -m pip install --upgrade setuptools wheel
          pip install -r requirements.txt

          # Install Immune2Vec dependencies only for Python 3.8
          if [[ "${{ matrix.python-version }}" == "3.8" ]]; then
            echo "Installing Immune2Vec dependencies for Python 3.8..."
            pip install gensim==3.8.3 ray
          else
            echo "Skipping Immune2Vec dependencies for Python ${{ matrix.python-version }}"
          fi

          pip install -e . --verbose
      # Install TCREMP for testing
      - name: Install TCREMP
        shell: bash -el {0}
        run: |
          # Only install TCREMP for Python 3.11+ as it requires newer Python
          if python -c "import sys; exit(0 if sys.version_info >= (3, 11) else 1)"; then
            echo "Installing TCREMP for Python 3.11+"
            git clone https://github.com/antigenomics/tcremp.git
            cd tcremp

            # Apply fix for clustering issue - force skip clustering like local environment
            echo "Applying TCREMP clustering fix..."
            sed -i.bak 's/if args.cluster:/if False:  # Force skip clustering/' tcremp/tcremp_run.py

            # Verify the fix was applied
            echo "Verifying TCREMP fix..."
            grep -n "Force skip clustering" tcremp/tcremp_run.py || echo "Fix verification failed"

            # Install pyarrow for parquet support (required by TCREMP)
            pip install pyarrow

            pip install .
            # Verify installation
            tcremp-run -h || echo "TCREMP installation verification failed"
          else
            echo "Skipping TCREMP installation for Python < 3.11"
          fi
      - name: Run ${{ matrix.test-file }}
        shell: bash -el {0}
        run: pytest --doctest-modules --junitxml=junit/test-results-${{ matrix.test-file }}-${{ matrix.python-version }}.xml ${{ matrix.test-file }}
      - name: Upload pytest test results
        uses: actions/upload-artifact@v4
        with:
          name: pytest-results-${{ matrix.python-version }}-${{ matrix.test-file }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
      - name: Test IgBlast translation
        shell: bash -el {0}
        run: |
          # Configure conda with timeout and retries
          conda config --set remote_connect_timeout_secs 30
          conda config --set remote_read_timeout_secs 60

          # Add retry mechanism for conda install with different channel orders
          for i in {1..3}; do
            echo "Attempt $i to install IgBlast..."
            CHANNELS="-c conda-forge -c bioconda -c defaults"

            if conda install -y $CHANNELS igblast=1.22.0; then
              echo "IgBlast installation successful"
              break
            else
              echo "Attempt $i failed, retrying..."
              sleep 10
            fi
            if [ $i -eq 3 ]; then
              echo "All attempts to install IgBlast failed"
              exit 1
            fi
          done

          # Download test data with retry
          for i in {1..3}; do
            echo "Attempt $i to download test data..."
            if wget -c https://github.com/nf-core/test-datasets/raw/airrflow/database-cache/igblast_base.zip; then
              echo "Download successful"
              break
            else
              echo "Download attempt $i failed, retrying..."
              sleep 5
            fi
            if [ $i -eq 3 ]; then
              echo "Download of IgBlast reference data failed"
              exit 1
            fi
          done

          unzip igblast_base.zip
          amulety translate-igblast tests/AIRR_rearrangement_single-cell_testtranslation.tsv . igblast_base
